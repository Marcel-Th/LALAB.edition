 Matrice de classe :

    def  __init__ ( soi , matrice ):
        soi . matrice  =  matrice

    def  dim ( auto , dim ):
        "" "Renvoie le nombre de lignes ou de colonnes d'une matrice donnée.
        
        >>> a = matrice (ligne (1, 2), ligne (3, 4), ligne (5, 6))
        >>> Matrice (a) .dim ("lignes")
        3
        >>> Matrice (a) .dim ("cols")
        2
        "" "
        si  dim  ==  "lignes" :
            retour  len ( self . matrice )
        elif  dim  ==  "cols" :
            return  len ( self . matrix [ 0 ])

    def  get_row ( soi , ligne ):
        "" "Prend une matrice sous forme de liste et retourne la ligne de matrice entrée comme" ligne ".
        >>> a = matrice ([1, 0], [0, 1])
        >>> Matrice (a) .get_row (2)
        [0, 1]
        "" "
        retourne  soi-même . matrice [ ligne - 1 ]

    def  get_col ( soi , col ):
        "" "Même concept que get_row, sauf avec les colonnes d'une matrice.
        >>> a = matrice ([1, 2], [3, 4])
        >>> Matrice (a) .get_col (1)
        [1, 3]
        "" "
        c  = []
        pour  x  en  soi . matrice :
            c . ajouter ( x [ col - 1 ])
        retour  c

    def  add_row ( soi , ligne ):
        "" "Ajoute une ligne à une matrice.
        >>> a = matrice ([1, 2])
        >>> Matrice (a) .add_row ([3, 4])
        >>> un
        [[1, 2], [3, 4]]
        "" "
        soi . matrice . ajouter ( ligne )

    def  add_col ( soi , col ):
        "" "Ajoute une colonne à une matrice.
        >>> a = matrice ([1], [3])
        >>> Matrice (a) .add_col ([2, 4])
        >>> un
        [[1, 2], [3, 4]]
        "" "
        elem  =  0
        pour  x  en  soi . matrice :
            x . append ( col [ elem ])
            elem  + =  1

    def  del_row ( soi , ligne ):
        "" "Supprime une ligne spécifiée d'une matrice.
    
        >>> a = matrice ([1, 2], [3, 4])
        >>> Matrice (a) .del_row (1)
        [[3, 4]]
        "" "
        a  =  soi . matrice
        del  a [ ligne - 1 ]
        retourner  un

    def  del_col ( soi , col ):
        "" "Supprime une colonne spécifiée d'une matrice.
        >>> a = matrice ([1, 2], [3, 4])
        >>> Matrice (a) .del_col (1)
        [[2], [4]]
        "" "
        a  =  soi . matrice
        pour la  ligne  dans  un :
            del  row [ col - 1 ]
        retourner  un

    def  get_element ( soi , ligne , colonne ):
        "" "Renvoie un seul élément d'une matrice.
        
        >>> a = matrice ([1, 2], [3, 4])
        >>> Matrice (a) .get_element (2, 1)
        3
        "" "
        retournez  Matrix ( self . matrix ). get_row ( ligne ) [ colonne - 1 ]

     copie def ( auto ):
        "" "Renvoie une copie d'une matrice afin que vous puissiez muter une copie et conserver l'état de l'autre.
        >>> a = matrice ([1, 2], [3, 4])
        >>> b = Matrice (a) .copie ()
        >>> Matrice (b) .del_row (1)
        [[3, 4]]
        >>> un
        [[1, 2], [3, 4]]
        "" "
        importer une  copie
        renvoyer une  copie . deepcopy ( auto . matrice )

    def  transposer ( auto ):
        "" "Transpose une matrice.
        >>> a = matrice ([1, 2], [3, 4])
        >>> Matrice (a) .transpose ()
        [[1, 3], [2, 4]]
        "" "
        t_mat  = []
        pour  x  in  range ( 1 , Matrix ( self . matrix ). dim ( "cols" ) + 1 ):
            t_mat . append ( Matrice ( auto . matrice ). get_col ( x ))
        retourne  t_mat

#######################################################################################################################################################################################################################################################################################################

classe  MatOperators :

    def  add_matrices ( soi , x , y ):
        "" "Ajoute deux matrices de mêmes dimensions.
        >>> matrice1 = matrice (ligne (1, 2), ligne (3, 4))
        >>> matrice2 = matrice (ligne (2, 3), ligne (4, 5))
        >>> MatOperators (). Add_matrices (matrice1, matrice2)
        [[3, 5], [7, 9]]
        "" "
        assert  Matrix ( x ). dim ( "lignes" ) ==  Matrice ( y ). dim ( "lignes" ) et  Matrix ( x ). dim ( "cols" ) ==  Matrice ( y ). dim ( "cols" ), "Veuillez sélectionner deux matrices de mêmes dimensions"
 
        z  = []
        pour  row_x , row_y  dans  zip ( x , y ):
            z . ajouter ([ a + b  pour  a , b  dans  zip ( row_x , row_y )])
        retour  z

    def  scalar_mul ( soi , a , scalaire ):
        "" "Multiplie une matrice par une valeur scalaire.
        >>> ligne1, ligne2 = ligne (1, 0), ligne (0, 1)
        >>> a = matrice (ligne1, ligne2)
        >>> MatOperators (). Scalar_mul (a, 3)
        [[3, 0], [0, 3]]
        "" "
        return [[ elem  *  scalar  for  elem  in  row ] for  row  in  a ]

    def  mul_matrices ( soi , x , y ):
        "" "Multiplie deux matrices de dimensions correspondantes.
        >>> matrice1 = matrice (ligne (1, 2), ligne (3, 4))
        >>> matrice2 = matrice (ligne (2, 3), ligne (4, 5))
        >>> MatOperators (). Mul_matrices (matrice1, matrice2)
        [[10, 13], [22, 29]]
        "" "
        assert  Matrix ( x ). dim ( "cols" ) ==  Matrice ( y ). dim ( "rows" ), "Veuillez choisir une paire valide de matrices à multiplier."

        z  = []
        y  =  Matrice ( y ). transposer ()
        pour  row_x  dans  x :
            p_row  = []
            pour  col_y  dans  y :
                produit  =  0
                pour  a , b  dans  zip ( row_x , col_y ):
                    produit  + =  a * b
                p_row . ajouter ( produit )
            z . ajouter ( p_row )
        retour  z

#######################################################################################################################################################################################################################################################################################################

def  ligne ( * args ):
    "" "Crée une ligne individuelle d'une matrice.
    >>> ligne (1, 2, 3, 4, 5)
    [1, 2, 3, 4, 5]
    "" "
    r  = []
    pour  arg  dans  args :
        r . ajouter ( arg )
    retour  r

 matrice def ( * args ):
    "" "Entrez les arguments sous forme de lignes sous forme de liste pour construire une matrice fonctionnelle.
    
    >>> ligne1, ligne2 = ligne (1, 0), ligne (0, 1)
    >>> matrice (ligne1, ligne2)
    [[1, 0], [0, 1]]
    "" "
    a  = []
    pour  arg  dans  args :
        a . ajouter ( arg )
    retourner  un

#######################################################################################################################################################################################################################################################################################################
############ BARRIÈRE D'ABSTRACTION ############
####################################################################################################################################################################################################################################################################################################### 

def  print_matrix ( a ):
    "" "Imprime une matrice sous forme de liste sous une forme lisible." ""
    lignes  =  matrice ( a ). dim ( "lignes" )
    pour  ligne  dans la  plage ( lignes ):
        print ( Matrice ( a ). get_row ( ligne + 1 ))

def  sous_matrices ( x , y ):
    "" "Soustrait deux matrices de mêmes dimensions.
    >>> matrice1 = matrice (ligne (1, 2), ligne (3, 4))
    >>> matrice2 = matrice (ligne (2, 3), ligne (4, 5))
    >>> sous_matrices (matrice1, matrice2)
    [[-1, -1], [-1, -1]]
    "" "
    y  =  MatOperators (). scalaire_mul ( y , - 1 )
    renvoie  MatOperators (). add_matrices ( x , y )

def  slicer ( a , m , n ):
    "" "Supprime la ligne et la colonne spécifiées d'une matrice, a.
    >>> a = matrice (ligne (1, 2), ligne (3, 4))
    >>> trancheur (a, 1, 2)
    [[3]]
    "" "
    b  =  matrice ( a ). copier ()
    Matrice ( b ). del_row ( m )
    Matrice ( b ). del_col ( n )
    retour  b

 cofacteur def ( a , m , n ):
    "" "Trouve le cofacteur d'une matrice avec les coordonnées données.
    
    >>> a = matrice (ligne (1, 0, 0), ligne (0, 1, 0), ligne (0, 0, 1))
    >>> cofacteur (a, 1, 1)
    1
    "" "
    b  =  trancheur ( a , m , n )
    retour ( - 1 ) ** ( m  +  n ) *  déterminant ( b )

def  déterminant ( a ):
    "" "Renvoie le déterminant d'une matrice nxn.
    
    >>> a = matrice (ligne (1, 2, 3), ligne (4, 5, 6), ligne (7, 8, 1))
    >>> déterminant (a)
    24
    "" "
    coord  =  Matrice ( a ). get_element

    si  Matrix ( a ). dim ( "rows" ) ==  2  et  Matrix ( a ). dim ( "cols" ) ==  2 :
        return  coord ( 1 , 1 ) *  coord ( 2 , 2 ) -  coord ( 1 , 2 ) *  coord ( 2 , 1 )

    total  =  0
    pour  col  in  range ( Matrix ( a ). dim ( "cols" )):
        total  + =  coord ( 1 , col + 1 ) *  cofacteur ( a , 1 , col + 1 )

    retour  total

def  inverse ( a ):
    "" "Renvoie l'inverse d'une matrice nxn.
    >>> a = matrice (ligne (1, 0, 0), ligne (0, 1, 0), ligne (0, 0, 1))
    >>> inverse (a)
    [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]
    "" "
    coord  =  Matrice ( a ). get_element    

    def  adj ():
        adj_matrix  =  matrice ()

        pour  x  dans la  plage ( 1 , Matrice ( a ). dim ( "lignes" ) + 1 ):
            row  = []
            pour  y  dans la  plage ( 1 , Matrice ( a ). dim ( "cols" ) + 1 ):
                ligne . append ( cofacteur ( a , x , y ))
            Matrice ( adj_matrix ). add_row ( ligne )
        
        retourne  Matrix ( adj_matrix ). transposer ()
            
    si  Matrix ( a ). dim ( "rows" ) ==  2  et  Matrix ( a ). dim ( "cols" ) ==  2 :
        div  =  1  /  déterminant ( a )
        pre_inverse  =  matrice (
            ligne ( coord ( 2 , 2 ), - 1 * coord ( 1 , 2 )),
            ligne ( - 1 * coord ( 2 , 1 ), - 1 * coord ( 1 , 1 ))
            )
        renvoie  MatOperators (). scalar_mul ( pre_inverse , div )

    adj_matrix  =  adj ()
    div  =  1  /  déterminant ( a )

    renvoie  MatOperators (). scalar_mul ( adj_matrix , div )
